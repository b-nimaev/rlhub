import { ObjectId } from "mongodb"
import { ExtraEditMessageText } from "telegraf/typings/telegram-types"
import { Translation, Sentence, voteModel } from "../../../models/ISentence"
import rlhubContext from "../../models/rlhubContext"

export default async function moderation_translates(ctx: rlhubContext) {
    try {
        await render_vote_sentence(ctx)
    } catch (err) {

        console.log(err)

    }
}

export async function render_vote_sentence(ctx: rlhubContext) {
    try {

        // –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ
        let translation = await Translation.findOne()
        let sentence_russian = await Sentence.findOne({
            _id: new ObjectId(translation?.sentence_russian)
        })

        // –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if (translation) {
            // @ts-ignore
            ctx.scene.session.current_translation_for_vote = translation._id
        }

        // —Ç–µ–∫—Å—Ç
        let message = `<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è / –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</b>\n\n`
        message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ <pre>${sentence_russian?.text}</pre> \n`
        // message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${sentence_russian?.translations.length}\n\n`
        message += `–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ \n`
        message += `<pre>${translation?.translate_text}</pre>`
        let statistic = {
            plus: <any>[],
            minus: <any>[]
        }

        if (translation) {
            if (translation.votes) {
                if (translation.votes.length) {


                    for (let i = 0; i < translation.votes.length; i++) {

                        const voteID = translation.votes[i]
                        const vote = await voteModel.findOne({ _id: voteID })

                        if (vote?.vote) {
                            statistic.plus.push(vote)
                        } else {
                            statistic.minus.push(vote)
                        }

                    }

                    console.log(statistic.plus.length)
                    console.log(statistic.minus.length)

                    // message += `\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <pre>15+, 2-</pre>`

                }
            }
        }

        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: `üëç ${statistic.plus.length}`,
                            callback_data: 'good'
                        },
                        {
                            text: `üëé ${statistic.minus.length}`,
                            callback_data: 'bad'
                        }
                    ],
                    [
                        {
                            text: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
                            callback_data: 'addTranslate'
                        }
                    ],
                    [
                        {
                            text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                            callback_data: 'skip'
                        }
                    ],
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        }
        if (ctx.updateType === 'callback_query') {
            ctx.editMessageText(message, extra)
            ctx.answerCbQuery()
        } else {
            ctx.reply(message, extra)
        }
        ctx.wizard.selectStep(2)
    } catch (err) {
        console.log(err)
    }
}