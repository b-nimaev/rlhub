import { Document, ObjectId, Schema } from "mongoose";
import { Composer, Context, Scenes } from "telegraf";
import { Message, Update } from "telegraf/typings/core/types/typegram";
import { ExtraEditMessageText, ExtraReplyMessage } from "telegraf/typings/telegram-types";
import { ISentence, Sentence } from "../../models/ISentence";
import { IUser, User } from "../../models/IUser";
import rlhubContext from "../models/rlhubContext";

const handler = new Composer<rlhubContext>();
const home = new Scenes.WizardScene("home", handler, async (ctx: rlhubContext) => await add_sentences_handler(ctx));

async function greeting (ctx: rlhubContext) {

    const extra: ExtraEditMessageText = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–°–∞–º–æ—É—á–∏—Ç–µ–ª—å", callback_data: "study" },
                    { text: "–°–ª–æ–≤–∞—Ä—å", callback_data: "vocabular" }
                ],
                [{ text: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data: 'sentences' }],
                [{ text: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫', callback_data: 'translater' }],
                [{ text: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è', callback_data: 'moderation' }],
                [{ text: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: "dashboard" }]
            ]
        }
    }

    let message = `–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, \n–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ <b>–ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b>`
    // message += `\n\n–î–ª—è –æ—Ü–∏—Ñ—Ä–æ–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –±—É—Ä—è—Ç—Å–∫–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∏–º–æ–≤–µ—Ä–Ω–æ <b>–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö</b>`
    // message += `\n\n–ù–∞—à–∞ —Ü–µ–ª—å —Å–æ–±—Ä–∞—Ç—å 100 000 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ-–±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞`
    message += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å'

    try {

        ctx.updateType === 'message' ? await ctx.reply(message, extra) : false
        ctx.updateType === 'callback_query' ? await ctx.editMessageText(message, extra) : false

    } catch (err) {
        console.error(err);
    }
}

home.start(async (ctx: rlhubContext) => {
    try {

        let document: IUser | null = await User.findOne({
            id: ctx.from?.id
        })

        if (!document) {

            if (ctx.from) {

                let user: IUser = {
                    id: ctx.from.id,
                    username: ctx.from.username,
                    first_name: ctx.from.first_name,
                    translations: [],
                    voted_translations: [],
                    rating: 0,
                    is_bot: false,
                    proposedProposals: []
                }
                new User(user).save()

            }

        } else {
            await greeting(ctx)
        }

    } catch (err) {
        console.log(err)
    }
});

home.action("vocabular", async (ctx) => {
    ctx.answerCbQuery()
    return ctx.scene.enter('vocabular')
})

home.action("sentences", async (ctx) => {
    return ctx.scene.enter('sentences')
})

home.action("translater", async (ctx) => {
    return ctx.answerCbQuery('–ù–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ')
})

home.action("study", async (ctx) => {
    return ctx.answerCbQuery('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ')
})

home.action("moderation", async (ctx) => {
    ctx.answerCbQuery()
    return ctx.scene.enter('moderation')
})

home.action("dashboard", async (ctx) => {
    await ctx.answerCbQuery('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
    return ctx.scene.enter('dashboard')
})

home.enter(async (ctx) => { return await greeting(ctx) })

home.command('add_sentences', async (ctx) => {
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º')
    ctx.wizard.selectStep(1)
})

async function add_sentences_handler (ctx: rlhubContext) {

    if (ctx.from) {
        try {

            if (ctx.updateType === 'callback_query') {
                if (ctx.callbackQuery) {

                    // @ts-ignore
                    if (ctx.callbackQuery.data) {

                        // @ts-ignore
                        let data: 'send_sentences' | 'back' = ctx.callbackQuery.data

                        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                        if (data === 'send_sentences') {
                            
                            for (let i = 0; i < ctx.session.sentences.length; i++) {
                                
                                let sentence: ISentence = {
                                    text: ctx.session.sentences[i],
                                    author: ctx.from.id,
                                    accepted: 'not view',
                                    translations: [],
                                    skipped_by: []
                                }

                                new Sentence(sentence).save().then(async (data) => {
                                    let object_id = data._id

                                    await User.findOneAndUpdate({ id: ctx.from?.id }, { $push: {
                                        "proposedProposals": object_id
                                    } })

                                })

                            }

                            await ctx.answerCbQuery(`${ctx.session.sentences} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–ø–∞—Å–∏–±–æ!`)
                            ctx.wizard.selectStep(0)
                            await greeting(ctx)
                        }

                        if (data === 'back') {
                            ctx.wizard.selectStep(0)
                            await ctx.answerCbQuery()
                            return greeting(ctx)
                        }
                    }
                 }

            } else if (ctx.updateType === 'message') {

                // @ts-ignore
                if (ctx.message.text) {

                    // @ts-ignore
                    let text = ctx.message.text

                    let user_id: number = ctx.from.id

                    let sentence: ISentence = {
                        text: text.toLocaleLowerCase(),
                        author: user_id,
                        accepted: 'not view',
                        translations: [],
                        skipped_by: []
                    }

                    let message: string = ``

                    if (sentence.text.indexOf('+;') !== -1) {
                        let splitted = sentence.text.split('+;')
                        let arr: string[] = []
                        for (let i = 0; i < splitted.length; i++) {
                            arr.push(splitted[i].trimEnd().trimStart())
                        }

                        ctx.session.sentences = arr

                        for (let i = 0; i < splitted.length; i++) {
                            message += `${i+1}) ${splitted[i].trimStart().trimEnd()}\n`
                        }
                    } else {
                        ctx.session.sentences = [text]
                        message += text
                    }

                    await ctx.reply(message, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                                        callback_data: 'send_sentences'
                                    }
                                ],
                                [
                                    {
                                        text: '–ù–∞–∑–∞–¥',
                                        callback_data: 'back'
                                    }
                                ]
                            ]
                        }
                    })

                } else {
                    await ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ")
                }

            }

        } catch (err) {
            ctx.wizard.selectStep(0)
            await greeting(ctx)
        }
    }
    
}

handler.on("message", async (ctx) => await greeting (ctx))

export default home
export { add_sentences_handler }