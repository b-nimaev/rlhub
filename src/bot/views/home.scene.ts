import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText, ExtraReplyMessage } from "telegraf/typings/telegram-types";
import rlhubContext from "../models/rlhubContext";

const handler = new Composer<rlhubContext>();
const home = new Scenes.WizardScene("home", handler);

async function greeting (ctx: rlhubContext) {
    const extra: ExtraReplyMessage | ExtraEditMessageText = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–°–∞–º–æ—É—á–∏—Ç–µ–ª—å", callback_data: "study" },
                    { text: "–°–ª–æ–≤–∞—Ä—å", callback_data: "vocabular" }
                ],
                [{ text: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫', callback_data: 'translater' }],
                [{ text: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è', callback_data: 'moderation' }],
                [{ text: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: "dashboard" }]
            ]
        }
    }

    let message = `–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, \n–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ <b>–ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b>`
    // message += `\n\n–î–ª—è –æ—Ü–∏—Ñ—Ä–æ–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –±—É—Ä—è—Ç—Å–∫–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∏–º–æ–≤–µ—Ä–Ω–æ <b>–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö</b>`
    message += `\n\n–ù–∞—à–∞ —Ü–µ–ª—å —Å–æ–±—Ä–∞—Ç—å 100 000 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ-–±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞`
    message += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å'

    try {

        ctx.updateType === 'message' ? await ctx.reply(message, extra) : false
        ctx.updateType === 'callback_query' ? await ctx.reply(message, extra) : false

    } catch (err) {
        console.error(err);
    }
}

home.start(async (ctx: rlhubContext) => await greeting(ctx));

home.action("translater", async (ctx) => {
    return ctx.answerCbQuery('–ù–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ')
})

home.action("study", async (ctx) => {
    return ctx.answerCbQuery('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ')
})

home.action("dashboard", async (ctx) => {
    await ctx.answerCbQuery('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
    return ctx.scene.enter('dashboard')
})

home.on("message", async (ctx) => { return await greeting(ctx) })

home.action(/./, async (ctx) => {
    await ctx.answerCbQuery('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')
    return await greeting(ctx)
})

export default home