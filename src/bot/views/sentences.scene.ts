import { text } from "body-parser";
import e from "express";
import { ObjectId } from "mongodb";
import { Document } from "mongoose";
import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import { ISentence, Sentence, Translation, translation } from "../../models/ISentence";
import { IUser, User } from "../../models/IUser";
import rlhubContext from "../models/rlhubContext";

const handler = new Composer<rlhubContext>();
const sentences = new Scenes.WizardScene("sentences", handler, 
    async (ctx: rlhubContext) => await my_sentences_handler(ctx),
    async (ctx: rlhubContext) => await add_sentences_handler(ctx),
    async (ctx: rlhubContext) => await translate_sentences_handler(ctx),
    async (ctx: rlhubContext) => await add_translate_to_sentences_hander(ctx))

function formatMoney(amount: any) {
    return new Intl.NumberFormat('ru-RU').format(amount);
}

// –ø—Ä–∏ –≤—Ö–æ–¥–µ
async function greeting(ctx: rlhubContext) {

    try {

        const extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
                            callback_data: 'translate_sentences'
                        }
                    ],
                    [
                        {
                            text: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                            callback_data: 'add_sentence'
                        }
                    ],[
                        {
                            text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                            callback_data: 'my_sentences'
                        }
                    ],
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'home'
                        }
                    ],
                ]
            }
        }

        let sentences: ISentence[] = await Sentence.find({})

        let left = 100000 - sentences.length
        
        

        let message = `<b>–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π üöÄ</b> \n\n`
        message += `–ù–∞—à–∞ —Ü–µ–ª—å —Å–æ–±—Ä–∞—Ç—å 100 000 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ-–±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n`
        message += `–ê –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω—É–∂–Ω—ã —Å–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ <b>—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</b>. \n\n–î–æ –∫–æ–Ω—Ü–∞ —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å <b>${formatMoney(left)}</b>x`

        ctx.updateType === 'message' ? await ctx.reply(message, extra) : false
        ctx.updateType === 'callback_query' ? await ctx.editMessageText(message, extra) : false

    } catch (err) {

        console.error(err);
    }

}
sentences.enter(async (ctx: rlhubContext) => await greeting(ctx));

// —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
sentences.action('my_sentences', async (ctx) => await my_sentences(ctx))
async function my_sentences (ctx: rlhubContext) {
    try {

        let message: string = `<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> \n\n`
        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        }

        message += `–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å–∏–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\n\n`

        let user: IUser | null = await User.findOne({ id: ctx.from?.id })
        let props_obj: {
            accepted: ISentence[],
            declined: ISentence[],
            not_view: ISentence[]
        } = {
            accepted: [],
            declined: [],
            not_view: []
        }

        if (user) {

            let props: string[] = user.proposedProposals

            for (let i = 0; i < props.length; i++) {

                let sentence: ISentence | null = await Sentence.findOne({ _id: new ObjectId(props[i]) })
                if (sentence) {
                    if (sentence.accepted === 'accepted') {
                        props_obj.accepted.push(sentence)
                    }
                    if (sentence.accepted === 'declined') {
                        props_obj.declined.push(sentence)
                    }
                    if (sentence.accepted === 'not view') {
                        props_obj.not_view.push(sentence)
                    }
                }
            }

        }

        message += `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${props_obj.not_view.length + props_obj.accepted.length + props_obj.declined.length}\n`
        message += `–ü—Ä–∏–Ω—è—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${props_obj.accepted.length}\n`
        message += `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${props_obj.declined.length}\n`
        message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: ${props_obj.not_view.length}`

        if (ctx.updateType === 'callback_query') {

            ctx.answerCbQuery()
            await ctx.editMessageText(message, extra)

        } else {

            await ctx.reply(message, extra)
        
        }

        ctx.wizard.selectStep(1)

    } catch (err) {

        console.log(err)

    }
}
async function my_sentences_handler (ctx: rlhubContext) {

    try {

        if (ctx.updateType === 'callback_query') {
            if (ctx.callbackQuery) {

                //@ts-ignore
                if (ctx.callbackQuery.data) {

                    // @ts-ignore
                    let data: 'back' = ctx.callbackQuery.data

                    if (data === "back") {

                        ctx.wizard.selectStep(0)
                        await greeting(ctx)

                    }

                }
            }
        } else {
            await my_sentences (ctx)
        }

    } catch (err) {

        console.log(err)
        
    }

}

// –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
sentences.action("translate_sentences", async (ctx) => await translate_sentences(ctx))
async function translate_sentences (ctx: rlhubContext) {
    try {

        let message: string = '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ üéØ</b>\n\n'
        message += '–Ø –±—É–¥—É –¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n\n'
        message += `–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª:\n`
        message += `‚Äî –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ\n`
        message += `‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º –æ—Ä–æ–¥ —É–≥—ç–Ω—É—É–¥—ã–µ \n`
        message += `‚Äî –í—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–∏—à–µ–º –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ \n`
        message += `‚Äî –ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è \n\n`
        message += `‚Äî –ë—É–∫–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ ‚Äî <code>“ª</code>, <code>“Ø</code>, <code>”©”©</code>, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. \n‚ùóÔ∏è–ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –Ω–∏—Ö, —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω—É–∂–Ω–∞—è –±—É–∫–≤–∞ \n\n`
        message += `<b>–ò –ø–æ–º–Ω–∏—Ç–µ, —á–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –ø–µ—Ä–µ–≤–æ–¥ ‚Äî —Ç–µ–º –¥–æ–ª—å—à–µ –ø—Ä–æ–∂–∏–≤–µ—Ç —è–∑—ã–∫</b>`
        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ù–∞—á–∞—Ç—å',
                            callback_data: 'start'
                        },
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        }
        
        if (ctx.updateType === 'callback_query') {
            await ctx.editMessageText(message, extra)
        } else {
            await ctx.reply(message, extra)
        }

        ctx.wizard.selectStep(3)

    } catch (err) {
        console.log(err)
    }
}

async function render_sentencse_for_translate (ctx: rlhubContext, sentence: ISentence) {
    
    let message: string = ''
    
    // @ts-ignore
    ctx.scene.session.sentence_id = sentence?._id.toString()
    message += `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: \n`
    message += `<code>${sentence?.text}</code>`
    message += `\n\n‚Äî –ë—É–∫–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ ‚Äî <code>“ª</code>, <code>“Ø</code>, <code>”©”©</code>, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.`

    if (sentence?.translations.length) {
        message += `\n\n<i>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã:</i>`

        for (let i = 0; i < sentence.translations.length; i++) {

            let translation: translation | null = await Translation.findOne({
                _id: new ObjectId(sentence.translations[i])
            })

            if (translation) {
                message += `\n${i+1}) ${translation.translate_text}`
            }

        }

    }

    // —Ç—É—Ç –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥—ã

    ctx.wizard.selectStep(4)

    return message
}

async function render_sft (ctx: rlhubContext) {
    try {

        let message: string = `<b>–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n`;
        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                            callback_data: 'skip'
                        },
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        }

        let sentence = await Sentence.findOne({
            skipped_by: {
                $ne: ctx.from?.id
            }
        }).sort({ 'translations.length': 1 })


        if (sentence) {

            await render_sentencse_for_translate(ctx, sentence).then((response: string) => {
                message += response
            })
            
        } else {
            
            message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
            
        }
        
        if (ctx.updateType === 'callback_query') {
            ctx.answerCbQuery()
            return await ctx.editMessageText(message, extra)
        } else {
            return await ctx.reply(message, extra)
        }



    } catch (err) {
        
        console.log(err)

    }
}

async function translate_sentences_handler (ctx: rlhubContext) {

    if (ctx.from) {
        try {

            if (ctx.updateType === 'callback_query') {

                // @ts-ignore
                if (ctx.callbackQuery.data) {

                    // @ts-ignore
                    let data: 'back' | 'start' = ctx.callbackQuery.data

                    if (data === 'back') {

                        await greeting(ctx)
                        ctx.wizard.selectStep(0)

                    }

                    if (data === 'start') {

                        await render_sft(ctx)

                    }

                }

            } else {
                await translate_sentences(ctx)
            }

        } catch (err) {

            console.log(err)

        }
    }

}

// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async function add_translate_to_sentences_hander(ctx: rlhubContext) {
    if (ctx.from) {
        try {

            if (ctx.updateType === 'callback_query') {

                // @ts-ignore
                if (ctx.callbackQuery.data) {

                    // @ts-ignore
                    let data: 'back' | 'skip' = ctx.callbackQuery.data

                    if (data === 'back') {

                        await translate_sentences(ctx)

                    }

                    if (data === 'skip') {

                        await Sentence.findOneAndUpdate({
                            _id: new ObjectId(ctx.session.__scenes.sentence_id)
                        }, {
                            $push: {
                                skipped_by: ctx.from.id
                            }
                        }).then(async () => {
                            await render_sft(ctx)
                        })

                        ctx.answerCbQuery()

                    }

                }

            }

            if (ctx.updateType === 'message') {

                // @ts-ignore
                if (ctx.message.text) {

                    // @ts-ignore
                    let text: string = ctx.message.text
                    let user_id: number = ctx.from.id

                    let translation: translation = {
                        sentence_russian: ctx.scene.session.sentence_id,
                        translate_text: text,
                        author: user_id,
                        votes: []
                    }

                    new Translation(translation).save().then(async (document) => {
                        await Sentence.findOneAndUpdate({
                            _id: new ObjectId(ctx.scene.session.sentence_id)
                        }, {
                            $push: {
                                translations: document._id.toString()
                            }
                        })
                    })

                } else {

                    await ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ")
                    await render_sft(ctx)

                }

            }

        } catch (err) {

            console.log(err)

        }
    }
}
async function add_translate_to_sentences(ctx: rlhubContext) {
    try {



    } catch (err) {

        console.log(err)

    }
}


// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
sentences.action("add_sentence", async (ctx: rlhubContext) => await add_sentences(ctx))
async function add_sentences(ctx: rlhubContext) {
    ctx.answerCbQuery()
    ctx.wizard.selectStep(2)
    let message = `<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n`
    message += `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º`
    await ctx.editMessageText(message, {
        parse_mode: 'HTML', reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–ù–∞–∑–∞–¥',
                        callback_data: 'back'
                    }
                ]
            ]
        }
    })
}
async function add_sentences_handler(ctx: rlhubContext) {

    if (ctx.from) {
        try {

            if (ctx.updateType === 'callback_query') {
                if (ctx.callbackQuery) {

                    // @ts-ignore
                    if (ctx.callbackQuery.data) {

                        // @ts-ignore
                        let data: 'send_sentences' | 'back' = ctx.callbackQuery.data

                        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                        if (data === 'send_sentences') {

                            for (let i = 0; i < ctx.session.sentences.length; i++) {

                                let sentence: ISentence = {
                                    text: ctx.session.sentences[i],
                                    author: ctx.from.id,
                                    translations: [],
                                    accepted: 'not view',
                                    skipped_by: []
                                }

                                new Sentence(sentence).save().then(async (data) => {
                                    let object_id = data._id

                                    await User.findOneAndUpdate({ id: ctx.from?.id }, {
                                        $push: {
                                            "proposedProposals": object_id
                                        }
                                    })

                                })

                            }

                            await ctx.answerCbQuery(`${ctx.session.sentences} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–ø–∞—Å–∏–±–æ!`)
                            ctx.wizard.selectStep(0)
                            await greeting(ctx)
                        }

                        if (data === 'back') {
                            ctx.wizard.selectStep(0)
                            await ctx.answerCbQuery()
                            return greeting(ctx)
                        }
                    }
                }

            } else if (ctx.updateType === 'message') {

                // @ts-ignore
                if (ctx.message.text) {

                    // @ts-ignore
                    let text = ctx.message.text

                    let user_id: number = ctx.from.id

                    let sentence: ISentence = {
                        text: text.toLocaleLowerCase(),
                        author: user_id,
                        translations: [],
                        accepted: 'not view',
                        skipped_by: []
                    }

                    let message: string = ``

                    if (sentence.text.indexOf('+;') !== -1) {
                        let splitted = sentence.text.split('+;')
                        let arr: string[] = []
                        for (let i = 0; i < splitted.length; i++) {
                            arr.push(splitted[i].trimEnd().trimStart())
                        }

                        ctx.session.sentences = arr

                        for (let i = 0; i < splitted.length; i++) {
                            message += `${i + 1}) ${splitted[i].trimStart().trimEnd()}\n`
                        }
                    } else {
                        ctx.session.sentences = [text]
                        message += text
                    }

                    await ctx.reply(message, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                                        callback_data: 'send_sentences'
                                    }
                                ],
                                [
                                    {
                                        text: '–ù–∞–∑–∞–¥',
                                        callback_data: 'back'
                                    }
                                ]
                            ]
                        }
                    })

                } else {
                    await ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ")
                }

            }

        } catch (err) {
            ctx.wizard.selectStep(0)
            await greeting(ctx)
        }
    }

}

// –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
sentences.action("home", async (ctx) => {
    ctx.answerCbQuery()
    ctx.scene.enter('home')
})

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –Ω–∞ —Å—Ü–µ–Ω–µ
handler.on("message", async (ctx) => await greeting(ctx))

export default sentences