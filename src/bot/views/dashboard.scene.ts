import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText, ExtraReplyMessage } from "telegraf/typings/telegram-types";
import { IUser, User } from "../../models/IUser";
import rlhubContext from "../models/rlhubContext";

const handler = new Composer<rlhubContext>();
const dashboard = new Scenes.WizardScene("dashboard", handler, async (ctx) => await about_project(ctx));

async function greeting (ctx: rlhubContext) {
    try {
        let user: IUser | null = await User.findOne({ id: ctx.from?.id })

        if (user) {

            const extra: ExtraEditMessageText = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–û –ø—Ä–æ–µ–∫—Ç–µ',
                                callback_data: 'about'
                            }
                        ], [
                            {
                                text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                                callback_data: 'common_settings'
                            }
                        ], [
                            {
                                text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
                                callback_data: 'help'
                            }
                        ],
                        [
                            {
                                text: '–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                                callback_data: 'reference_materials'
                            }
                        ],
                        [
                            {
                                text: '–ù–∞–∑–∞–¥',
                                callback_data: 'home'
                            },
                            {
                                text: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                                callback_data: 'contact'
                            }
                        ],
                    ]
                }
            }

            let words = []
            let message = `<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> \n\n–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${user.rating} \n–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: 0 \n–°–ª–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${words.length} \n–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: 0 \n–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${user.proposedProposals.length}`

            ctx.updateType === 'message' ? await ctx.reply(message, extra) : false
            ctx.updateType === 'callback_query' ? await ctx.editMessageText(message, extra) : false

        }

    } catch (err) {
        console.error(err);
    }
}

dashboard.enter(async (ctx: rlhubContext) => await greeting(ctx));

dashboard.action("common_settings", async (ctx) => {
    await ctx.answerCbQuery('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç / –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    return ctx.scene.enter('settings')
})

async function about_project (ctx: rlhubContext) {
    
    try {

        if (ctx.updateType === 'callback_query') {
            if (ctx.callbackQuery) {

                // @ts-ignore
                if (ctx.callbackQuery.data) {

                    // @ts-ignore
                    let data: 'back' = ctx.callbackQuery.data

                    if (data === 'back') {
                        
                        ctx.wizard.selectStep(0)
                        await ctx.answerCbQuery()
                        await greeting(ctx)

                    }

                }

            }
        } else {
            about_project_section_render (ctx)
        }

    } catch (err) {
        
        console.log(err)

    }

}

dashboard.action("about", async (ctx) => await about_project_section_render (ctx))

async function about_project_section_render (ctx: rlhubContext) {
    try {
        
        let message: string = '<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Äî –û –ø—Ä–æ–µ–∫—Ç–µ</b> \n\n–ù–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞—Ü–µ–ª–µ–Ω –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –ë—É—Ä—è—Ç–∏–∏. \n\n–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å —è–∑—ã–∫ —Å—Ä–µ–¥–∏ –º–æ–ª–æ–¥–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–≤–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Ä–≥–∞–Ω–∏–∑—É—è —è–∑—ã–∫–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. \n\n–ù–∞—à–∞ —Ü–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–æ–≥–∞—Ç—Å—Ç–≤–æ –±—É—Ä—è—Ç—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã –∏ –µ–µ —è–∑—ã–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π.'
        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        }

        if (ctx.updateType === 'callback_query') {
            
            await ctx.editMessageText(message, extra)

            ctx.answerCbQuery()
            ctx.wizard.selectStep(1)

        } else {

            await ctx.reply(message, extra)

        }

    } catch (err) {
        console.log(err)
    }
}

handler.on("message", async (ctx) => await greeting(ctx))

dashboard.action('reference_materials', async (ctx) => {
    return ctx.answerCbQuery()
})

dashboard.action("help", async (ctx) => await help(ctx))
async function help(ctx: rlhubContext) {
    try {

        let message: string = `<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ üí∞</b> \n\n`
        message += `https://my.qiwi.com/form/Sandak-Dorzho-BUmcm2ZMV6`
        
        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        }

        if (ctx.updateType === 'callback_query') {
            await ctx.editMessageText(message, extra)
        } else {
            await ctx.reply(message, extra)
        }

    } catch (err) {

        console.log(err)

    }
}

dashboard.action("home", async (ctx) => {
    return ctx.scene.enter('home')
})

dashboard.action("contact", async (ctx) => {
    return ctx.answerCbQuery('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
})

export default dashboard