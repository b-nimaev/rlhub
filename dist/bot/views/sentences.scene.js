"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
const telegraf_1 = require("telegraf");
const ISentence_1 = require("../../models/ISentence");
const IUser_1 = require("../../models/IUser");
const format_money_1 = __importDefault(require("../utlis/format_money"));
const handler = new telegraf_1.Composer();
const sentences = new telegraf_1.Scenes.WizardScene("sentences", handler, (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield my_sentences_handler(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield add_sentences_handler(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield translate_sentences_handler(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield add_translate_to_sentences_hander(ctx); }));
// –ø—Ä–∏ –≤—Ö–æ–¥–µ
function greeting(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const extra = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
                                callback_data: 'translate_sentences'
                            }
                        ],
                        [
                            {
                                text: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                callback_data: 'add_sentence'
                            }
                        ], [
                            {
                                text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                callback_data: 'my_sentences'
                            }
                        ],
                        [
                            {
                                text: '–ù–∞–∑–∞–¥',
                                callback_data: 'home'
                            }
                        ],
                    ]
                }
            };
            let sentences = yield ISentence_1.Sentence.find({});
            let left = 100000 - sentences.length;
            let message = `<b>–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π üöÄ</b> \n\n`;
            message += `–ù–∞—à–∞ —Ü–µ–ª—å —Å–æ–±—Ä–∞—Ç—å 100 000 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ-–±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n`;
            message += `–ê –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω—É–∂–Ω—ã —Å–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ <b>—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</b>. \n\n–î–æ –∫–æ–Ω—Ü–∞ —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å <b>${(0, format_money_1.default)(left)}</b>x`;
            ctx.updateType === 'message' ? yield ctx.reply(message, extra) : false;
            ctx.updateType === 'callback_query' ? yield ctx.editMessageText(message, extra) : false;
        }
        catch (err) {
            console.error(err);
        }
    });
}
sentences.enter((ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield greeting(ctx); }));
// —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
sentences.action('my_sentences', (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield my_sentences(ctx); }));
function my_sentences(ctx) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let message = `<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> \n\n`;
            let extra = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–ù–∞–∑–∞–¥',
                                callback_data: 'back'
                            }
                        ]
                    ]
                }
            };
            message += `–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å–∏–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\n\n`;
            let user = yield IUser_1.User.findOne({ id: (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id });
            let props_obj = {
                accepted: [],
                declined: [],
                not_view: []
            };
            if (user) {
                let props = user.proposedProposals;
                for (let i = 0; i < props.length; i++) {
                    let sentence = yield ISentence_1.Sentence.findOne({ _id: new mongodb_1.ObjectId(props[i]) });
                    if (sentence) {
                        if (sentence.accepted === 'accepted') {
                            props_obj.accepted.push(sentence);
                        }
                        if (sentence.accepted === 'declined') {
                            props_obj.declined.push(sentence);
                        }
                        if (sentence.accepted === 'not view') {
                            props_obj.not_view.push(sentence);
                        }
                    }
                }
            }
            message += `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${props_obj.not_view.length + props_obj.accepted.length + props_obj.declined.length}\n`;
            message += `–ü—Ä–∏–Ω—è—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${props_obj.accepted.length}\n`;
            message += `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${props_obj.declined.length}\n`;
            message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: ${props_obj.not_view.length}`;
            if (ctx.updateType === 'callback_query') {
                ctx.answerCbQuery();
                yield ctx.editMessageText(message, extra);
            }
            else {
                yield ctx.reply(message, extra);
            }
            ctx.wizard.selectStep(1);
        }
        catch (err) {
            console.log(err);
        }
    });
}
function my_sentences_handler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.updateType === 'callback_query') {
                if (ctx.callbackQuery) {
                    //@ts-ignore
                    if (ctx.callbackQuery.data) {
                        // @ts-ignore
                        let data = ctx.callbackQuery.data;
                        if (data === "back") {
                            ctx.wizard.selectStep(0);
                            yield greeting(ctx);
                        }
                    }
                }
            }
            else {
                yield my_sentences(ctx);
            }
        }
        catch (err) {
            console.log(err);
        }
    });
}
// –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
sentences.action("translate_sentences", (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield translate_sentences(ctx); }));
function translate_sentences(ctx) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let message = '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ üéØ</b>\n\n';
            message += '–Ø –±—É–¥—É –¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n\n';
            message += `–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª:\n`;
            message += `‚Äî –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ\n`;
            message += `‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º –æ—Ä–æ–¥ —É–≥—ç–Ω—É—É–¥—ã–µ \n`;
            message += `‚Äî –í—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–∏—à–µ–º –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ \n`;
            message += `‚Äî –ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è \n\n`;
            message += `‚Äî –ë—É–∫–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ ‚Äî <code>“ª</code>, <code>“Ø</code>, <code>”©”©</code>, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. \n‚ùóÔ∏è–ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –Ω–∏—Ö, —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω—É–∂–Ω–∞—è –±—É–∫–≤–∞ \n\n`;
            message += `<b>–ò –ø–æ–º–Ω–∏—Ç–µ, —á–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –ø–µ—Ä–µ–≤–æ–¥ ‚Äî —Ç–µ–º –¥–æ–ª—å—à–µ –ø—Ä–æ–∂–∏–≤–µ—Ç —è–∑—ã–∫</b>`;
            let extra = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: []
                }
            };
            (_a = extra.reply_markup) === null || _a === void 0 ? void 0 : _a.inline_keyboard.push([{
                    text: '–ù–∞—á–∞—Ç—å',
                    callback_data: 'start'
                }]);
            yield ISentence_1.Sentence.find({ skipped_by: { $in: [(_b = ctx.from) === null || _b === void 0 ? void 0 : _b.id] } }).then((docs) => __awaiter(this, void 0, void 0, function* () {
                var _d;
                if (docs.length > 0) {
                    (_d = extra.reply_markup) === null || _d === void 0 ? void 0 : _d.inline_keyboard.push([{
                            text: `–°–±—Ä–æ—Å skipped(${docs.length})`,
                            callback_data: 'reset_skipped'
                        }]);
                }
            }));
            (_c = extra.reply_markup) === null || _c === void 0 ? void 0 : _c.inline_keyboard.push([{
                    text: '–ù–∞–∑–∞–¥',
                    callback_data: 'back'
                }]);
            if (ctx.updateType === 'callback_query') {
                yield ctx.editMessageText(message, extra);
            }
            else {
                yield ctx.reply(message, extra);
            }
            ctx.wizard.selectStep(3);
        }
        catch (err) {
            console.log(err);
        }
    });
}
function render_sentencse_for_translate(ctx, sentence) {
    return __awaiter(this, void 0, void 0, function* () {
        let message = '';
        // @ts-ignore
        ctx.scene.session.sentence_id = sentence === null || sentence === void 0 ? void 0 : sentence._id.toString();
        message += `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: \n`;
        message += `<code>${sentence === null || sentence === void 0 ? void 0 : sentence.text}</code>`;
        message += `\n\n‚Äî –ë—É–∫–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ ‚Äî <code>“ª</code>, <code>“Ø</code>, <code>”©”©</code>, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.`;
        if (sentence === null || sentence === void 0 ? void 0 : sentence.translations.length) {
            message += `\n\n<i>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã:</i>`;
            for (let i = 0; i < sentence.translations.length; i++) {
                let translation = yield ISentence_1.Translation.findOne({
                    _id: new mongodb_1.ObjectId(sentence.translations[i])
                });
                if (translation) {
                    message += `\n${i + 1}) ${translation.translate_text}`;
                }
            }
        }
        // —Ç—É—Ç –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥—ã
        ctx.wizard.selectStep(4);
        return message;
    });
}
function render_sft(ctx) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let message = `<b>–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n`;
            let extra = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                                callback_data: 'skip'
                            },
                            {
                                text: '–ù–∞–∑–∞–¥',
                                callback_data: 'back'
                            }
                        ]
                    ]
                }
            };
            let sentence = yield ISentence_1.Sentence.findOne({
                skipped_by: {
                    $ne: (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id
                }
            }).sort({ 'translations.length': 1 });
            if (sentence) {
                yield render_sentencse_for_translate(ctx, sentence).then((response) => {
                    message += response;
                });
            }
            else {
                message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
            }
            if (ctx.updateType === 'callback_query') {
                ctx.answerCbQuery();
                return yield ctx.editMessageText(message, extra);
            }
            else {
                return yield ctx.reply(message, extra);
            }
        }
        catch (err) {
            console.log(err);
        }
    });
}
function reset_skipped(ctx) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield ISentence_1.Sentence.updateMany({
                skipped_by: { $in: [(_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id] }
            }, {
                $pull: {
                    skipped_by: (_b = ctx.from) === null || _b === void 0 ? void 0 : _b.id
                }
            }).then(() => __awaiter(this, void 0, void 0, function* () {
                ctx.answerCbQuery('–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–±—Ä–æ—à–µ–Ω—ã');
            })).catch(() => __awaiter(this, void 0, void 0, function* () {
                ctx.answerCbQuery('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');
            }));
        }
        catch (err) {
            console.log(err);
        }
    });
}
function translate_sentences_handler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        if (ctx.from) {
            try {
                if (ctx.updateType === 'callback_query') {
                    // @ts-ignore
                    if (ctx.callbackQuery.data) {
                        // @ts-ignore
                        let data = ctx.callbackQuery.data;
                        if (data === 'back') {
                            yield greeting(ctx);
                            ctx.wizard.selectStep(0);
                        }
                        if (data === 'start') {
                            yield render_sft(ctx);
                        }
                        if (data === 'reset_skipped') {
                            yield reset_skipped(ctx);
                            yield translate_sentences(ctx);
                        }
                    }
                }
                else {
                    yield translate_sentences(ctx);
                }
            }
            catch (err) {
                console.log(err);
            }
        }
    });
}
// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
function add_translate_to_sentences_hander(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        if (ctx.from) {
            try {
                if (ctx.updateType === 'callback_query') {
                    // @ts-ignore
                    if (ctx.callbackQuery.data) {
                        // @ts-ignore
                        let data = ctx.callbackQuery.data;
                        if (data === 'back') {
                            yield translate_sentences(ctx);
                        }
                        if (data === 'skip') {
                            yield ISentence_1.Sentence.findOneAndUpdate({
                                _id: new mongodb_1.ObjectId(ctx.session.__scenes.sentence_id)
                            }, {
                                $push: {
                                    skipped_by: ctx.from.id
                                }
                            }).then(() => __awaiter(this, void 0, void 0, function* () {
                                yield render_sft(ctx);
                            }));
                            ctx.answerCbQuery();
                        }
                    }
                }
                if (ctx.updateType === 'message') {
                    // @ts-ignore
                    if (ctx.message.text) {
                        // @ts-ignore
                        let text = ctx.message.text;
                        let user_id = ctx.from.id;
                        let translation = {
                            sentence_russian: ctx.scene.session.sentence_id,
                            translate_text: text,
                            author: user_id,
                            votes: []
                        };
                        new ISentence_1.Translation(translation).save().then((document) => __awaiter(this, void 0, void 0, function* () {
                            yield ISentence_1.Sentence.findOneAndUpdate({
                                _id: new mongodb_1.ObjectId(ctx.scene.session.sentence_id)
                            }, {
                                $push: {
                                    translations: document._id.toString()
                                }
                            });
                        }));
                    }
                    else {
                        yield ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ");
                        yield render_sft(ctx);
                    }
                }
            }
            catch (err) {
                console.log(err);
            }
        }
    });
}
function add_translate_to_sentences(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
        }
        catch (err) {
            console.log(err);
        }
    });
}
// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
sentences.action("add_sentence", (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield add_sentences(ctx); }));
function add_sentences(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        ctx.answerCbQuery();
        ctx.wizard.selectStep(2);
        let message = `<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n`;
        message += `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º`;
        yield ctx.editMessageText(message, {
            parse_mode: 'HTML', reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        });
    });
}
function add_sentences_handler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        if (ctx.from) {
            try {
                if (ctx.updateType === 'callback_query') {
                    if (ctx.callbackQuery) {
                        // @ts-ignore
                        if (ctx.callbackQuery.data) {
                            // @ts-ignore
                            let data = ctx.callbackQuery.data;
                            // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                            if (data === 'send_sentences') {
                                for (let i = 0; i < ctx.session.sentences.length; i++) {
                                    let sentence = {
                                        text: ctx.session.sentences[i],
                                        author: ctx.from.id,
                                        translations: [],
                                        accepted: 'not view',
                                        skipped_by: []
                                    };
                                    new ISentence_1.Sentence(sentence).save().then((data) => __awaiter(this, void 0, void 0, function* () {
                                        var _a;
                                        let object_id = data._id;
                                        yield IUser_1.User.findOneAndUpdate({ id: (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id }, {
                                            $push: {
                                                "proposedProposals": object_id
                                            }
                                        });
                                    }));
                                }
                                yield ctx.answerCbQuery(`${ctx.session.sentences} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–ø–∞—Å–∏–±–æ!`);
                                ctx.wizard.selectStep(0);
                                yield greeting(ctx);
                            }
                            if (data === 'back') {
                                ctx.wizard.selectStep(0);
                                yield ctx.answerCbQuery();
                                return greeting(ctx);
                            }
                        }
                    }
                }
                else if (ctx.updateType === 'message') {
                    // @ts-ignore
                    if (ctx.message.text) {
                        // @ts-ignore
                        let text = ctx.message.text;
                        let user_id = ctx.from.id;
                        let sentence = {
                            text: text.toLocaleLowerCase(),
                            author: user_id,
                            translations: [],
                            accepted: 'not view',
                            skipped_by: []
                        };
                        let message = ``;
                        if (sentence.text.indexOf('+;') !== -1) {
                            let splitted = sentence.text.split('+;');
                            let arr = [];
                            for (let i = 0; i < splitted.length; i++) {
                                arr.push(splitted[i].trimEnd().trimStart());
                            }
                            ctx.session.sentences = arr;
                            for (let i = 0; i < splitted.length; i++) {
                                message += `${i + 1}) ${splitted[i].trimStart().trimEnd()}\n`;
                            }
                        }
                        else {
                            ctx.session.sentences = [text];
                            message += text;
                        }
                        yield ctx.reply(message, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                                            callback_data: 'send_sentences'
                                        }
                                    ],
                                    [
                                        {
                                            text: '–ù–∞–∑–∞–¥',
                                            callback_data: 'back'
                                        }
                                    ]
                                ]
                            }
                        });
                    }
                    else {
                        yield ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ");
                    }
                }
            }
            catch (err) {
                ctx.wizard.selectStep(0);
                yield greeting(ctx);
            }
        }
    });
}
// –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
sentences.action("home", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    ctx.answerCbQuery();
    ctx.scene.enter('home');
}));
// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –Ω–∞ —Å—Ü–µ–Ω–µ
handler.on("message", (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield greeting(ctx); }));
exports.default = sentences;
